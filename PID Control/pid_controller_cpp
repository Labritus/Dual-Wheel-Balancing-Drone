#include "../include/pid_controller.h"
#include <cmath>
#include <limits>
#include <algorithm>

PIDController::PIDController(float kp, float ki, float kd) :
    kp_(kp),
    ki_(ki),
    kd_(kd),
    prev_error_(0.0f),
    integral_(0.0f),
    prev_process_value_(0.0f),
    integral_limit_(std::numeric_limits<float>::max()),
    min_output_(-std::numeric_limits<float>::max()),
    max_output_(std::numeric_limits<float>::max())
{
}

void PIDController::setParameters(float kp, float ki, float kd) {
    kp_ = kp;
    ki_ = ki;
    kd_ = kd;
}

float PIDController::getKp() const {
    return kp_;
}

float PIDController::getKi() const {
    return ki_;
}

float PIDController::getKd() const {
    return kd_;
}

void PIDController::setIntegralLimit(float limit) {
    integral_limit_ = std::abs(limit);
}

void PIDController::setOutputLimit(float min_output, float max_output) {
    if (min_output < max_output) {
        min_output_ = min_output;
        max_output_ = max_output;
    }
}

void PIDController::reset() {
    prev_error_ = 0.0f;
    integral_ = 0.0f;
    prev_process_value_ = 0.0f;
}

float PIDController::computePosition(float setpoint, float process_value) {
    // Compute error
    float error = setpoint - process_value;
    
    // Compute integral term
    integral_ += error;
    integral_ = limit(integral_, -integral_limit_, integral_limit_);
    
    // Compute derivative term (using process variable to avoid derivative kick caused by setpoint changes)
    float derivative = prev_process_value_ - process_value;
    prev_process_value_ = process_value;
    
    // Compute PID output
    float output = kp_ * error + ki_ * integral_ + kd_ * derivative;
    
    // Limit output range
    output = limit(output, min_output_, max_output_);
    
    // Store current error
    prev_error_ = error;
    
    return output;
}

float PIDController::computeIncremental(float setpoint, float process_value) {
    // Compute error
    float error = setpoint - process_value;
    
    // Compute incremental PID output
    float p_term = kp_ * (error - prev_error_);
    float i_term = ki_ * error;
    float d_term = kd_ * (error - 2 * prev_error_ + prev_process_value_);
    
    float delta_output = p_term + i_term + d_term;
    
    // Store previous error and process value
    prev_process_value_ = prev_error_;
    prev_error_ = error;
    
    return delta_output;
}

float PIDController::limit(float value, float min_value, float max_value) {
    return std::max(min_value, std::min(value, max_value));
} 