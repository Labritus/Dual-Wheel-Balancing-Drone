#ifndef PID_CONTROLLER_H
#define PID_CONTROLLER_H

class PIDController {
public:
    PIDController(float kp, float ki, float kd);
    
    // Update PID controller parameters
    void setParameters(float kp, float ki, float kd);
    
    // Get current parameters
    float getKp() const;
    float getKi() const;
    float getKd() const;
    
    // Set limit for the integral term
    void setIntegralLimit(float limit);
    
    // Set output limits for the controller
    void setOutputLimit(float min_output, float max_output);
    
    // Reset controller state
    void reset();
    
    // Compute control output (position-based PID)
    float computePosition(float setpoint, float process_value);
    
    // Compute control output (incremental PID)
    float computeIncremental(float setpoint, float process_value);
    
private:
    // PID parameters
    float kp_; // Proportional gain
    float ki_; // Integral gain
    float kd_; // Derivative gain
    
    // State variables
    float prev_error_;        // Previous error
    float integral_;          // Integral value
    float prev_process_value_; // Previous process value
    
    // Limit values
    float integral_limit_;    // Integral term limit
    float min_output_;        // Minimum output value
    float max_output_;        // Maximum output value
    
    // Helper function: constrain value within a specified range
    float limit(float value, float min_value, float max_value);
};

#endif // PID_CONTROLLER_H 